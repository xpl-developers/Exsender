{"version":3,"file":"static/webpack/static/development/pages/token-distributor.js.4b6f6a5e73a6f7ffdb05.hot-update.js","sources":["webpack:///./utils/web3-connect.js"],"sourcesContent":["import standardAbi from \"../abi/distributor.json\";\nlet xplAddress = \"0x51f43d0c05eEfdEB70eEAf973e0b8286E494902D\";\nlet networkKey = {\n\t\t\"1\": {\"name\": \"Ethereum Main Network\", \"colour\": \"success\"}, \n\t\t\"2\": {\"name\": \"Morden Test network\", \"colour\": \"dark\"}, \n\t\t\"3\": {\"name\": \"Ropsten Test Network\", \"colour\": \"danger\"},\n\t\t\"4\": {\"name\": \"Rinkeby Test Network\", \"colour\": \"warning\"}, \n\t\t\"42\": {\"name\": \"Kovan Test Network\", \"colour\": \"link\"},\n\t\t\"5\": {\"name\": \"Goerli Test Network\", \"colour\": \"info\"},\n\t\t\"60\": {\"name\": \"Gochain Network\", \"colour\": \"primary\"},\n\t}\n\nexport class Web3ConnectionHandler {\n\n\tstatic checkBrowserCompatibility() {\n\t\tif (typeof window !== 'undefined' && (typeof window.ethereum !== 'undefined' || typeof window.web3 !== 'undefined')) {\n\t\t\treturn window['ethereum'] || window.web3.currentProvider;\n\t\t}\n\t}\n\n\tstatic async enableWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\t\n\t\t\tlet browserProperties = {};\n\t\t\t\n\t\t\ttry{\n\t\t\t\tlet request = await provider.enable();\n\t\t\t\tbrowserProperties.selectedAddress = request[0];\n\t\t\t\tbrowserProperties.networkVersion = provider.networkVersion;\n\t\t\t\treturn browserProperties;\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(JSON.stringify(err));\n\t\t\t\tthrow (err);\n\t\t\t\t// return null;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic instantiateWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\tlet web3 = new Web3(provider);\n\t\t\treturn web3;\n\t\t} \n\t}\n\tstatic connectedNetwork() {\n\t\treturn networkKey[Web3ConnectionHandler.checkBrowserCompatibility().networkVersion] || {\"name\": \"Unknown Network\", \"colour\": \"black\"};\n\t}\n\n\tstatic getContractProp(contractAddress, method, ...methodParams) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[method](...methodParams, function(err, result){\n\t\t\t\tif(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tstatic approveSpender(contractAddress, amount, spender = xplAddress) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[\"approve\"].sendTransaction(spender, amount, function(err, txHash) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(txHash);\n\t\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tstatic distributeToken(method, foreignContractAddress, addresses, amount, contractAddress = xplAddress) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[method].sendTransaction(foreignContractAddress, addresses, amount, function(err, txHash) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(txHash);\n\t\t\t\t\t}\n\t\t\t})\n\t\t})\t\n\t}\n\tstatic delay(ms = 5000) {\n\t\treturn new Promise( resolve => setTimeout(resolve, ms));\n\t}\n\tstatic getMinedTransactionReceipt(txHash) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tweb3.eth.getTransactionReceipt(txHash, function(err, receipt) {\n\t\t\t\tif (receipt) {\n\t\t\t\t\tresolve(receipt);\t\t\t\t\t\n\t\t\t\t} else if (err == null) {\n\t\t\t\t\tWeb3ConnectionHandler.delay()\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tresolve(Web3ConnectionHandler.getMinedTransactionReceipt(txHash));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\tstatic validateAddress(address) {\n\t\tif ( typeof address == \"string\" ) {\n\n\t\t\treturn web3.isAddress(address);\n\t\t\n\t\t} else if ( address instanceof Array && address.length > 0 ) {\n\t\t\t\n\t\t\treturn !address.some( (addr) => !web3.isAddress(addr) );\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\treturn false;\n\t\t\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAPA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AAWA;AAZA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AACA;AAjBA;AACA;AADA;AAAA;AAAA;AAqBA;AArBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AA6BA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAlCA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AACA;AArCA;AAAA;AAAA;AAuCA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAAA;AAAA;AAoDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAAA;AAAA;AAkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9EA;AAAA;AAAA;AA+EA;AACA;AAAA;AAAA;AACA;AAjFA;AAAA;AAAA;AAmFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlGA;AAAA;AAAA;AAoGA;AAEA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAjHA;AACA;AADA;AAAA;;;;A","sourceRoot":""}