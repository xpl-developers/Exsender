{"version":3,"file":"static/webpack/static/development/pages/token-distributor.js.37efd597934069b3931d.hot-update.js","sources":["webpack:///./pages/token-distributor.js"],"sourcesContent":["import Page from '../layouts/Main';\n\nimport { Input, Button, FileInput, TextArea, Select, MultipleCheckBoxes } from '../components/FormElements';\n\nimport { LockedWeb3Browser, NoWeb3Browser, Web3ConnectionProps } from '../components/Web3Status';\nimport { ConnectedContractProps } from '../components/Contract';\nimport { TransactionMonitor } from '../components/TransactionMonitor';\n\nimport SubHeader from '../components/SubHeader';\nimport Processing from '../components/LoadingIndicator';\nimport Warning from '../components/Warning';\n\nimport { SpreadsheetHelper } from '../utils/fileHelpers';\nimport { Web3ConnectionHandler } from '../utils/web3-connect';\nimport Misc from '../utils/misc';\n\nconst xplAddress = \"0x51f43d0c05eEfdEB70eEAf973e0b8286E494902D\";\n\nclass TokenDistributor extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.contractProps = {\n\t\t\tcontractName: \"\",\n\t\t\tcontractDecimals: \"\",\n\t\t\tcontractSymbol: \"\",\n\t\t\taddressBalance: \"\",\n\t\t\tdistributorContractAllowance: \"\",\n\t\t}\n\t\tthis.newDistribution = {\n\t\t\tselectedFileName: \"No file selected\",\n\t\t\ttextAreaWithAddresses: \"\",\n\t\t\ttokenAmount: \"\",\n\t\t\ttotalAmount: \"\",\n\t\t\ttotalAddresses: \"\",\n\t\t\tshowTransactionMonitor: false,\n\t\t\ttransactionBatch: \"\",\n\t\t\ttransferPerBatch: 180,//recommeded\n\t\t\ttransactionInProgress: false\n\t\t}\n\n\t\tthis.state = {\n\t\t\tisUnifiedAmount: true, \n\t\t\tisWeb3Browser: false, \n\t\t\tweb3BrowserConnected: false,\n\t\t\tisProcessing: false,\n\t\t\tcontractAddress: \"\",\n\t\t\t\n\t\t\t...this.contractProps,\n\t\t\t...this.newDistribution\n\t\t};\n\n\t\tthis.toggleAmount = this.toggleAmount.bind(this);\n\t\tthis.toggleTransactionMonitor = this.toggleTransactionMonitor.bind(this);\n\t\tthis.restartDistribution = this.restartDistribution.bind(this);\n\t\tthis.unlockBrowser = this.unlockBrowser.bind(this);\n\t\tthis.handleBlur = this.handleBlur.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.handleReset = this.handleReset.bind(this);\n\n\t\t// this.fileInput = React.createRef();\n\t}\n\tunlockBrowser() {\n\t\tlet self = this;\n\t\tWeb3ConnectionHandler.enableWeb3Browser()\n\t\t.then(function() {\n\t\t\tself.setState({web3BrowserConnected: true});\n\t\t})\n\t\t.catch(function(err) {\n\t\t\tconsole.log(err)\n\t\t})\n\t}\n\ttoggleAmount() {\n\t\tthis.setState({\n\t\t\tisUnifiedAmount: !this.state.isUnifiedAmount\n\t\t})\n\t}\n\ttoggleTransactionMonitor() {\n\t\tthis.setState({\n\t\t\tshowTransactionMonitor: !this.state.showTransactionMonitor\n\t\t})\n\t}\t\n\thandleBlur(e) {\n\t\tlet {name, value} = e.target;\n\t\tthis.setState({[name]: value});\n\n\t\tif ( name == \"contractAddress\" ) {\n\t\t\tthis.handleContractAddress(value);\n\t\t} else if ( name == \"textAreaWithAddresses\" ) {\n\t\t\tthis.handleAddresses(value);\n\t\t} else if ( name == \"tokenAmount\" ) {\n\t\t\tthis.handleAmount(value);\n\t\t}\n\t}\n\thandleChange(e) {\n\t\tlet {name, value} = e.target;\n\t\tlet self = this;\n\n\t\tif (name == \"uploadFileInput\") {\n\t\t\tlet uploadElement = document.getElementById(name);\n\t\t\tlet files = uploadElement.files;\n\n\t\t\tif(files.length > 0 ) {\n\t\t\t\tself.setState({\n\t\t\t\t\tselectedFileName: files[0].name,\n\t\t\t\t\tisProcessing: true\n\t\t\t\t});\n\n\t\t\t\tSpreadsheetHelper.readFile(files[0])\n\t\t\t\t.then( json => {\n\t\t\t\t\treturn SpreadsheetHelper.readObjectProperty(json);\n\t\t\t\t})\n\t\t\t\t.then( columnsObject => {\n\t\t\t\t\tconsole.log(columnsObject)\n\t\t\t\t\tif ( columnsObject[\"amounts\"] ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*self.setState({\n\t\t\t\t\t\t\ttokenAmount: columnsObject[\"amounts\"],\n\t\t\t\t\t\t\ttextAreaWithAddresses: columnsObject[\"addresses\"]\n\t\t\t\t\t\t})*/\n\t\t\t\t\t\tself.handleAmount(columnsObject[\"amounts\"].join());\n\t\t\t\t\t\tself.handleAddresses(columnsObject[\"addresses\"].join());\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/*self.setState({\n\t\t\t\t\t\t\ttextAreaWithAddresses: columnsObject[\"addresses\"]\n\t\t\t\t\t\t})*/\n\t\t\t\t\t\tself.handleAddresses(columnsObject[\"addresses\"].join());\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch( err => {\n\t\t\t\t\twindow.alert(\"Invalid file.\")\n\t\t\t\t})\n\t\t\t\t.finally(() =>  {\n\t\t\t\t\tself.setState({isProcessing: false});\n\t\t\t\t\tuploadElement.value = \"\";\n\t\t\t\t}) \n\n\t\t\t}\n\t\t} else {\n\t\t\tself.setState({[name]: value});\t\n\t\t} \n\t}\n\tasync handleContractAddress(value) {\n\t\tlet validAddress = Web3ConnectionHandler.validateAddress(value);\n\n\t\tif( validAddress ) {\n\t\t\tthis.setState({isProcessing: true});\n\t\t\ttry {\n\t\t\t\tlet contractName = await Web3ConnectionHandler.getContractProp(value, 'name');\n\t\t\t\t\n\t\t\t\tlet contractSymbol = await Web3ConnectionHandler.getContractProp(value, 'symbol');\n\n\t\t\t\tlet contractDecimals = (await Web3ConnectionHandler.getContractProp(value, 'decimals')).toNumber();\n\t\t\t\t\n\t\t\t\tlet addressBalance = ((await Web3ConnectionHandler.getContractProp(value, 'balanceOf', Web3ConnectionHandler.checkBrowserCompatibility().selectedAddress)).toNumber() / Math.pow(10, contractDecimals)).toString();\n\n\t\t\t\tlet distributorContractAllowance = (await Web3ConnectionHandler.getContractProp(value, 'allowance', Web3ConnectionHandler.checkBrowserCompatibility().selectedAddress, xplAddress)) / Math.pow(10, contractDecimals);\n\t\t\t\t\n\t\t\t\t// update state\n\t\t\t\tthis.setState({\n\t\t\t\t\tcontractName,\n\t\t\t\t\tcontractSymbol,\n\t\t\t\t\tcontractDecimals,\n\t\t\t\t\taddressBalance,\n\t\t\t\t\tdistributorContractAllowance,\n\t\t\t\t\tcontractInputCssClass: \"is-success\"\n\t\t\t\t});\n\n\t\t\t} catch(err) {\n\t\t\t\t// console.log(\"Invalid contract Address / Check network\");\n\t\t\t\tthis.emptyContractProps();\n\t\t\t} finally {\n\t\t\t\tthis.setState({isProcessing: false});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.emptyContractProps();\n\t\t}\n\t}\n\thandleAmount(amountValue) {\n\t\tlet totalAmount;\n\t\tif ( !this.state.isUnifiedAmount ) {\n\t\t\tlet amountsArray = (amountValue.replace(/\\s+/g, \"\")).split(',');\n\t\t\t\tamountsArray = Misc.removeFalsey(amountsArray);\n\n\t\t\tlet validateAmounts = !amountsArray.some( amt => !Number(amt) );\n\n\t\t\tif ( validateAmounts && amountsArray.length) {\n\t\t\t\t\n\t\t\t\tlet amountCount = amountsArray.length;\n\t\t\t\ttotalAmount = amountCount + \" (\" + amountsArray.reduce(Misc.numberReducer) + \")\";\n\n\t\t\t\tthis.setState({\n\t\t\t\t\ttotalAmount,\n\t\t\t\t\ttokenAmount: amountsArray,\n\t\t\t\t\ttokenAmountInputCssClass: \"is-success\"\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttokenAmountInputCssClass: \"is-danger\"\n\t\t\t\t});\n\t\t\t}\n\t\t} else if ( this.state.isUnifiedAmount ) {\n\t\t\tlet amounts = Number(amountValue);\n\t\t\tif ( amounts ) {\n\t\t\t\ttotalAmount = \"Unified\";\n\n\t\t\t\tthis.setState({\n\t\t\t\t\ttotalAmount,\n\t\t\t\t\ttokenAmount: amounts,\n\t\t\t\t\ttokenAmountInputCssClass: \"is-success\"\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttokenAmountInputCssClass: \"is-danger\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\thandleAddresses(addressesValue) {\n\t\tlet totalAddresses,\n\t\t\taddressesArray = (addressesValue.replace(/\\s+/g, \"\")).split(',');\n\t\t\taddressesArray = Misc.removeFalsey(addressesArray);\n\t\t\taddressesArray = Misc.removeSpecialChars(addressesArray);\n\t\t// let validAddresses = Web3ConnectionHandler.validateAddress(addressesArray);\n\t\tif ( /*validAddresses*/ addressesArray.length ) {\n\t\t\ttotalAddresses = addressesArray.length;\n\t\t\tthis.setState({\n\t\t\t\ttotalAddresses,\n\t\t\t\ttextAreaWithAddresses: addressesArray,\n\t\t\t\ttextAreaWithAddressesInputCssClass: \"is-success\"\n\t\t\t});\n\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttextAreaWithAddressesInputCssClass: \"is-danger\"\n\t\t\t});\t\n\t\t}\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tlet self = this;\n\t\t//handle addresses\n\t\tif (!(self.state.textAreaWithAddresses instanceof Array) || !(self.state.textAreaWithAddresses.length > 0)) {\n\t\t\treturn window.alert(\"ETH Addresses must be comma separated and not empty.\");\n\t\t}\n\t\t// handle amount\n\t\tlet sumAmount;\n\t\tif (self.state.isUnifiedAmount) {\n\t\t\tif (!Number(this.state.tokenAmount)) {\n\t\t\t\treturn window.alert(\"Invalid amount of token.\");\n\t\t\t} \n\t\t\tsumAmount = this.state.tokenAmount * this.state.textAreaWithAddresses.length;\n\t\t} else {\n\t\t\tif (!(self.state.tokenAmount instanceof Array) || !(self.state.tokenAmount.length > 0)) {\n\t\t\t\treturn window.alert(\"Amount is splitted and amount must be comma separated.\");\n\t\t\t} \n\t\t\tif (self.state.tokenAmount.length != self.state.textAreaWithAddresses.length) {\n\t\t\t\treturn window.alert(\"Amount is splitted and addresses count must be the same with amount count.\");\n\t\t\t} \n\t\t\tsumAmount = self.state.tokenAmount.reduce(Misc.numberReducer);\n\t\t}\n\t\t//handle contract address\n\t\tlet contractReady = self.state.contractAddress && (self.state.contractDecimals !== \"\");\n\t\tlet hasEnoughBalance = self.state.addressBalance >= sumAmount;\n\n\t\tif (!contractReady) {\n\t\t\tlet message = \"Contract address is invalid\";\n\t\t\treturn window.alert(message);\n\t\t} else if (!hasEnoughBalance) {\n\t\t\tlet message = \"You do not have enough balance.\";\n\t\t\treturn window.alert(message);\n\t\t}\n\t\t// window.alert(\"Contract is ready to be sent\");\n\t\tself.handleDistribution();\n\t}\n\thandleDistribution() {\n\t\tlet self = this;\n\n\t\tlet init = () => {\n\t\t\tif (self.state.isUnifiedAmount) {\n\t\t\t\tself.handleDistributionWithUnifiedAmount();\n\t\t\t} else {\n\t\t\t\tself.handleDistributionWithSplittedAmount();\n\t\t\t}\n\n\t\t\t// update transactionBatch\n\t\t\tlet batches = [],\n\t\t\t\tlength = Math.ceil(self.state.textAreaWithAddresses.length / self.state.transferPerBatch);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tlet temp = {status: \"pending\", hash: \"waiting for broadcast\"};\n\t\t\t\tbatches[i] = temp;\n\t\t\t}\n\n\t\t\tself.setState({\n\t\t\t\ttransactionBatch: batches,\n\t\t\t\tshowTransactionMonitor: true\n\t\t\t})\n\t\t}\n\n\t\tif (self.state.distributorContractAllowance < 1) {\n\t\t\tWeb3ConnectionHandler.approveSpender(\n\t\t\t\tself.state.contractAddress,\n\t\t\t\t(self.state.addressBalance * Math.pow(10, self.state.contractDecimals))\n\t\t\t)\n\t\t\t.then(txHash => {\n\t\t\t\tself.setState({isProcessing: true, transactionInProgress: true});\n\t\t\t\treturn Web3ConnectionHandler.getMinedTransactionReceipt(txHash);\n\t\t\t})\n\t\t\t.then(txReceipt => {\n\t\t\t\tif (txReceipt.status == \"0x0\") {\n\t\t\t\t\t//transaction failed!\n\t\t\t\t\treturn window.alert(\"Approval transaction failed.\");\n\t\t\t\t}\n\t\t\t\tself.setState({\n\t\t\t\t\tdistributorContractAllowance: self.state.addressBalance\n\t\t\t\t});\n\n\t\t\t\tinit();\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\twindow.alert(\"Error occurred in approval.\");\n\t\t\t})\n\t\t\t.finally (() => {\n\t\t\t\tself.setState({isProcessing: false, transactionInProgress: false});\n\t\t\t}) \n\t\t} else {\n\t\t\tinit();\n\t\t}\n\t}\n\thandleDistributionWithSplittedAmount(iterator = 0, size = this.state.transferPerBatch) {\n\t\titerator = Number(iterator);\n\t\tsize = Number(size);\n\t\t\n\t\tlet self = this;\n\n\t\tlet chunkAddresses = self.state.textAreaWithAddresses.slice(iterator * size, (iterator + 1) * size);\n\n\t\tlet chunkAmount = self.state.tokenAmount.slice(iterator * size, (iterator + 1) * size);\n\n\t\t\tchunkAmount = chunkAmount.map(amt => amt * Math.pow(10, self.state.contractDecimals));\n\n\t\tif (!chunkAddresses.length) {\n\t\t\treturn window.alert(\"Distribution completed!\");\n\t\t}\n\t\tself.setState({isProcessing: true, transactionInProgress: true});\n\n\t\tWeb3ConnectionHandler.distributeToken(\n\t\t\t\"distributeForeignTokenWithSplittedAmount\",\n\t\t\tself.state.contractAddress,\n\t\t\tchunkAddresses,\n\t\t\tchunkAmount\n\t\t)\n\t\t.then(txHash => {\n\t\t\t\n\t\t\tself.updateMonitor(iterator, {status: \"processing\", hash: txHash})\n\n\t\t\treturn Web3ConnectionHandler.getMinedTransactionReceipt(txHash);\n\t\t})\n\t\t.then(txReceipt => {\n\t\t\tif (txReceipt.status == \"0x0\") {\n\t\t\t\t//transaction failed!\n\t\t\t\tself.updateMonitor(iterator, {hash: txReceipt.transactionHash, onClick: self.restartDistribution})\n\n\t\t\t\treturn window.alert(\"Transaction at index \"+iterator+\" failed.\");\n\t\t\t}\n\t\t\t\n\t\t\tself.updateMonitor(iterator, {status: \"success\", hash: txReceipt.transactionHash});\n\t\t\t\n\t\t\t//call the next transaction\n\t\t\tself.handleDistributionWithSplittedAmount(iterator + 1);\n\t\t})\n\t\t.catch(err => {\n\t\t\t\tself.updateMonitor(iterator, {hash: \"txhash unknown\", onClick: self.restartDistribution})\n\n\t\t\t\twindow.alert(\"Error occurred at transaction index \"+iterator);\n\t\t})\n\t\t.finally (() => {\n\t\t\tself.setState({isProcessing: false, transactionInProgress: false});\n\t\t}) \n\t}\n\thandleDistributionWithUnifiedAmount(iterator = 0, size = this.state.transferPerBatch) {\n\t\titerator = Number(iterator);\n\t\tsize = Number(size);\n\n\t\tlet self = this;\n\n\t\tlet chunkAddresses = self.state.textAreaWithAddresses.slice(iterator * size, (iterator + 1) * size);\n\t\t\n\t\tlet amount = self.state.tokenAmount * Math.pow(10, self.state.contractDecimals);\n\n\t\tif (!chunkAddresses.length) {\n\t\t\treturn window.alert(\"Distribution completed!\");\n\t\t}\n\n\t\tself.setState({isProcessing: true, transactionInProgress: true});\n\n\t\tWeb3ConnectionHandler.distributeToken(\n\t\t\t\"distributeForeignTokenWithUnifiedAmount\",\n\t\t\tself.state.contractAddress,\n\t\t\tchunkAddresses,\n\t\t\tamount\n\t\t)\n\t\t.then(txHash => {\n\t\t\tself.updateMonitor(iterator, {status: \"processing\", hash: txHash})\n\n\t\t\treturn Web3ConnectionHandler.getMinedTransactionReceipt(txHash);\n\t\t})\n\t\t.then(txReceipt => {\n\t\t\tif (txReceipt.status == \"0x0\") {\n\t\t\t\t//transaction failed!\n\t\t\t\tself.updateMonitor(iterator, {hash: txReceipt.transactionHash, onClick: self.restartDistribution})\n\n\t\t\t\treturn window.alert(\"Transaction at index \"+iterator+\" failed.\");\n\t\t\t}\n\n\t\t\tself.updateMonitor(iterator, {status: \"success\", hash: txReceipt.transactionHash});\n\t\t\t//call the next transaction\n\t\t\tself.handleDistributionWithUnifiedAmount(iterator + 1);\n\t\t})\n\t\t.catch(err => {\n\t\t\t\tself.updateMonitor(iterator, {hash: \"txhash unknown\", onClick: self.restartDistribution})\n\n\t\t\t\twindow.alert(\"Error occurred at transaction index \"+iterator);\n\t\t\t\tconsole.log(err)\n\t\t})\n\t\t.finally (() => {\n\t\t\tself.setState({isProcessing: false, transactionInProgress: false});\n\t\t}) \n\t}\n\tupdateMonitor(index, properties) {\n\t\tthis.setState((state, props) => {\n\t\t\tlet newBatch = [...state.transactionBatch];\n\t\t\t\tnewBatch[index] = {...properties};\n\t\t\treturn {\n\t\t\t\ttransactionBatch: newBatch\n\t\t\t}\n\t\t});\n\t}\n\trestartDistribution(e) {\n\t\tlet iterator = e.target.getAttribute(\"data-index\");\n\t\t\n\t\tif (this.state.isUnifiedAmount) {\n\t\t\tthis.handleDistributionWithUnifiedAmount(iterator);\n\t\t} else {\n\t\t\tthis.handleDistributionWithSplittedAmount(iterator);\n\t\t}\n\t}\n\temptyContractProps() {\n\t\tthis.setState({\n\t\t\tcontractInputCssClass: \"is-danger\",\n\t\t\t...this.contractProps\n\t\t});\n\t}\n\thandleReset() {\n\t\tthis.setState({\n\t\t\tcontractAddress: \"\",\n\t\t\tcontractInputCssClass: \"\",\n\t\t\ttokenAmountInputCssClass: \"\",\n\t\t\ttextAreaWithAddressesInputCssClass: \"\",\n\t\t\t...this.newDistribution,\n\t\t\t...this.contractProps\n\t\t});\n\t}\n\tformFields() {\n\t\treturn {\n\t\t\tcontractAddress: {\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"contractAddress\",\n\t\t\t\tplaceholder: \"Contract Address\",\n\t\t\t\tclassName: this.state.contractInputCssClass + \" is-large\",\n\t\t\t\tvalue: this.state.contractAddress,\n\t\t\t\tonBlur: this.handleBlur,\n\t\t\t\tonChange: this.handleChange\n\t\t\t},\n\t\t\tcontractDecimals: {\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"contractDecimals\",\n\t\t\t\tplaceholder: \"Decimals\",\n\t\t\t\tclassName: \"is-medium\",\n\t\t\t\treadOnly: true,\n\t\t\t\tvalue: this.state.contractDecimals\n\t\t\t},\n\t\t\taddressBalance: {\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"addressBalance\",\n\t\t\t\tplaceholder: \"Balance\",\n\t\t\t\tclassName: \"input is-medium\",\n\t\t\t\treadOnly: true,\n\t\t\t\tvalue: this.state.addressBalance\n\t\t\t},\n\t\t\tdistributorContractAllowance: {\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"distributorContractAllowance\",\n\t\t\t\tplaceholder: \"Allowance\",\n\t\t\t\tclassName: \"input is-medium\",\n\t\t\t\treadOnly: true,\n\t\t\t\tvalue: this.state.distributorContractAllowance\n\n\t\t\t},\n\t\t\tamountController: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"radio\",\n\t\t\t\t\tname: \"amountController\",\n\t\t\t\t\tplaceholder: \"Unified amount\",\n\t\t\t\t\tdefaultChecked: true,\n\t\t\t\t\tonChange: this.toggleAmount\n\t\t\t\t},\n\n\t\t\t\t{\n\t\t\t\t\ttype: \"radio\",\n\t\t\t\t\tname: \"amountController\",\n\t\t\t\t\tplaceholder: \"Split amount\",\n\t\t\t\t\tonChange: this.toggleAmount\n\t\t\t\t}\n\t\t\t],\n\t\t\tuploadFileInput: {\n\t\t\t\tname: \"uploadFileInput\",\n\t\t\t\tonChange: this.handleChange,\n\t\t\t\tlabel: \"Import data (optional)\",\n\t\t\t\tfileName: this.state.selectedFileName\n\t\t\t},\n\t\t\ttokenAmountInput: {\n\t\t\t\ttype: \"text\",\n\t\t\t\tname: \"tokenAmount\",\n\t\t\t\tclassName: this.state.tokenAmountInputCssClass + \" is-large\",\n\t\t\t\tvalue: this.state.tokenAmount,\n\t\t\t\tplaceholder: \"Amount of token\",\n\t\t\t\tonBlur: this.handleBlur,\n\t\t\t\tonChange: this.handleChange\n\t\t\t},\n\t\t\ttokenAmountTextArea: {\n\t\t\t\tname: \"tokenAmount\",\n\t\t\t\tclassName: this.state.tokenAmountInputCssClass,\n\t\t\t\tvalue: this.state.tokenAmount,\n\t\t\t\tonBlur: this.handleBlur,\n\t\t\t\tonChange: this.handleChange,\n\t\t\t\tplaceholder: \"Unlimited comma separated amount in order of addresses \\n240, 50, 100, 10, 75, 13, 5\",\n\t\t\t\ttokenAmountType: \"textarea\",\n\t\t\t},\n\n\t\t\ttextAreaWithAddresses: {\n\t\t\t\tname: \"textAreaWithAddresses\",\n\t\t\t\tclassName: this.state.textAreaWithAddressesInputCssClass,\n\t\t\t\tvalue: this.state.textAreaWithAddresses,\n\t\t\t\tplaceholder: \"Unlimited comma separated addresses\\n0x138e326c28114f65202b4ed82a1eecdf81451e09, 0xca353c48ab32b8baba846477d28254309be5e7c6\",\n\t\t\t\tonBlur: this.handleBlur,\n\t\t\t\tonChange: this.handleChange\n\t\t\t},\n\t\t\tsubmitButton: {\n\t\t\t\ttype: \"submit\",\n\t\t\t\ttext: \"Send Transaction\",\n\t\t\t\tclassName: \"button is-large is-link\",\n\t\t\t\tdisabled: this.state.transactionInProgress ? true : null\n\t\t\t},\n\t\t\tresetButton: {\n\t\t\t\ttype: \"button\",\n\t\t\t\ttext: \"Reset\",\n\t\t\t\tclassName: \"button is-medium is-danger\",\n\t\t\t\tonClick: this.handleReset\n\t\t\t},\n\t\t\tmonitorButton: {\n\t\t\t\ttype: \"button\",\n\t\t\t\ttext: \"Show monitor\",\n\t\t\t\tclassName: \"button is-warning is-small\",\n\t\t\t\tonClick: this.toggleTransactionMonitor\n\t\t\t},\n\t\t\ttransferPerBatch: {\n\t\t\t\tname: \"transferPerBatch\",\n\t\t\t\tvalue: this.state.transferPerBatch,\n\t\t\t\tonChange: this.handleChange,\n\t\t\t\tclassName: \"is-small\",\n\t\t\t\toptions: [\t\n\t\t\t\t\t{value: \"100\"},\n\t\t\t\t\t{value: \"150\"},\n\t\t\t\t\t{value: \"185\"},\n\t\t\t\t\t{value: \"200\"},\n\t\t\t\t\t{value: \"250\"},\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tif (Web3ConnectionHandler.checkBrowserCompatibility()) {\n\t\t\tthis.setState({isWeb3Browser: true});\n\t\t\tthis.unlockBrowser();\n\t\t}\n\t}\n\trender() {\n\t\tif (this.state.web3BrowserConnected && this.state.isWeb3Browser) {\n\t\t\treturn (\n\t\t\t\t<Page>\n\t\t\t\t\t<SubHeader />\n\t\t\t\t\t<section className=\"halfpage-height mb-4\">\n\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t<div className=\"columns\">\n\t\t\t\t\t\t\t\t<div className=\"column is-8\">\n\t\t\t\t\t\t\t\t\t<ConnectedContractProps\n\t\t\t\t\t\t\t\t\t\tcontractAddress={this.state.contractAddress}\n\t\t\t\t\t\t\t\t\t\tcontractName={this.state.contractName}\n\t\t\t\t\t\t\t\t\t\tcontractSymbol={this.state.contractSymbol}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t\t<div className=\"is-size-6 has-background-white border-left\">\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t{...this.formFields().monitorButton}\n\t\t\t\t\t\t\t\t\t\t/><br/>\n\t\t\t\t\t\t\t\t\t\t<span>Transfer per transaction</span><br/>\n\t\t\t\t\t\t\t\t\t\t<Select \n\t\t\t\t\t\t\t\t\t\t\t{...this.formFields().transferPerBatch}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"columns\">\n\t\t\t\t\t\t\t\t<form className=\"column is-8\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t\t\t\t<Input {...this.formFields().contractAddress} />\n\n\t\t\t\t\t\t\t\t\t<div className=\"columns\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t\t\t\t<Input {...this.formFields().contractDecimals} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t\t\t\t<Input {...this.formFields().addressBalance} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t\t\t\t<Input {...this.formFields().distributorContractAllowance} />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<MultipleCheckBoxes \n\t\t\t\t\t\t\t\t\t\tinputArray={this.formFields().amountController}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<FileInput\n\t\t\t\t\t\t\t\t\t\t{...this.formFields().uploadFileInput} \n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.state.isUnifiedAmount &&\n\t\t\t\t\t\t\t\t\t\t<Input {...this.formFields().tokenAmountInput} />\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t!this.state.isUnifiedAmount &&\n\t\t\t\t\t\t\t\t\t\t<TextArea\n\t\t\t\t\t\t\t\t\t\t\t{...this.formFields().tokenAmountTextArea} \n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t<TextArea\n\t\t\t\t\t\t\t\t\t\t{...this.formFields().textAreaWithAddresses} \n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<div className=\"field\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"control buttons\">\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t{...this.formFields().submitButton}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t{...this.formFields().resetButton}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div className=\"column\">\n\t\t\t\t\t\t\t\t\t<DistributionStat\n\t\t\t\t\t\t\t\t\t\ttotalAmount = {this.state.totalAmount}\n\t\t\t\t\t\t\t\t\t\ttotalAddresses = {this.state.totalAddresses}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<br/>\n\n\t\t\t\t\t\t\t\t\t{ this.state.isProcessing &&\n\t\t\t\t\t\t\t\t\t\t<Processing />\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t<Warning />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\t\t\t\t\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.showTransactionMonitor &&\n\t\t\t\t\t\t<TransactionMonitor\n\t\t\t\t\t\t\tonClick={this.toggleTransactionMonitor}\n\t\t\t\t\t\t\tmonitorArray={this.state.transactionBatch}\n\t\t\t\t\t\t/>\t\n\t\t\t\t\t}\n\t\t\t\t</Page>\t\n\t\t\t)\n\t\t} else if (this.state.isWeb3Browser) {\n\t\t\treturn (\n\t\t\t\t<Page>\n\t\t\t\t\t<SubHeader />\n\t\t\t\t\t<LockedWeb3Browser>\n\t\t\t\t\t\t<button \n\t\t\t\t\t\t\tclassName=\"button is-warning is-large\"\n\t\t\t\t\t\t\tonClick={this.unlockBrowser}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\tUnlock Metamask\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</LockedWeb3Browser>\n\t\t\t\t</Page>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Page>\n\t\t\t\t\t<SubHeader />\n\t\t\t\t\t<NoWeb3Browser />\n\t\t\t\t</Page>\n\t\t\t) \n\t\t}\n\t}\n}\n\n\nfunction DistributionStat(props) {\n\treturn (\n\t\t<div className=\"is-size-6\">\n\t\t\t<h3 className=\"is-size-5\">Statistics</h3>\n\t\t\t<p>\n\t\t\t\tAmount count: {props.totalAmount || 0} <br/>\n\t\t\t\tAddress count: {props.totalAddresses || 0} \n\t\t\t</p>\n\t\t</div>\n\t)\n}\n\n\n\nexport default TokenDistributor;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AA0CA;AACA;;;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AACA;AACA;AACA;AADA;AAGA;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;;;;AAIA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AACA;;;;;;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;;;AAEA;AACA;;AADA;;AAEA;AACA;;AADA;;AAEA;AACA;;AADA;;AAEA;AACA;;AADA;AAAA;AAAA;;AAEA;AACA;;;AADA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;AAUA;AACA;AACA;;;AACA;AAAA;AAAA;;;;;;;;AAGA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAOA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAIA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAVA;AAtGA;AAovrBA;AACA;AA0rBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAGA;;;;A","sourceRoot":""}