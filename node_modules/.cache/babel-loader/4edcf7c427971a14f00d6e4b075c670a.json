{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport XLSX from 'xlsx';\nexport var SpreadsheetHelper =\n/*#__PURE__*/\nfunction () {\n  function SpreadsheetHelper() {\n    _classCallCheck(this, SpreadsheetHelper);\n  }\n\n  _createClass(SpreadsheetHelper, null, [{\n    key: \"validateFileType\",\n    value: function validateFileType(type) {\n      var types = [\"application/vnd.oasis.opendocument.spreadsheet\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", \"application/json\"];\n      return types.includes(type);\n    }\n  }, {\n    key: \"readFile\",\n    value: function readFile(file) {\n      return new _Promise(function (resolve, reject) {\n        if (!SpreadsheetHelper.validateFileType(file.type)) {\n          return reject(\"Invalid file type\");\n        }\n\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var result = e.target.result,\n              json;\n\n          if (file.type === \"application/json\") {\n            return resolve(result);\n          } else {\n            var sheet = XLSX.read(result, {\n              type: \"binary\"\n            });\n            var sheetName = sheet.SheetNames[0] || sheet.Workbook.Sheets[0].name;\n            var sheetToJson = XLSX.utils.sheet_to_json(sheet.Sheets[sheetName]);\n            return resolve(sheetToJson);\n          }\n        };\n\n        reader.onerror = function (e) {\n          reader.abort();\n          return reject(\"Error reading file\");\n        };\n\n        reader.readAsBinaryString(file);\n      });\n    }\n  }, {\n    key: \"readObjectProperty\",\n    value: function readObjectProperty(arrayOfObject) {\n      // columns -> [\"address\", ?\"amount\"]\n      var addresses = [],\n          amounts = [];\n\n      for (var i = 0; i < arrayOfObject.length; i++) {\n        var temp = arrayOfObject[i];\n        addresses.push(temp[\"address\"]);\n        if (temp[\"amount\"]) amounts.push(temp[\"amount\"]);\n      }\n\n      if (amounts.length > 0) return _Promise.resolve({\n        addresses: addresses,\n        amounts: amounts\n      });\n      return _Promise.resolve({\n        addresses: addresses\n      });\n    }\n  }]);\n\n  return SpreadsheetHelper;\n}();","map":{"version":3,"sources":["/home/abdulhakeem/Express/exsender/utils/fileHelpers.js"],"names":["XLSX","SpreadsheetHelper","type","types","includes","file","resolve","reject","validateFileType","reader","FileReader","onload","e","result","target","json","sheet","read","sheetName","SheetNames","Workbook","Sheets","name","sheetToJson","utils","sheet_to_json","onerror","abort","readAsBinaryString","arrayOfObject","addresses","amounts","i","length","temp","push"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAGA,WAAaC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qCACyBC,IADzB,EAC+B;AAC7B,UAAIC,KAAK,GAAG,CACX,gDADW,EAEX,mEAFW,EAGX,kBAHW,CAAZ;AAKA,aAAOA,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAP;AACA;AARF;AAAA;AAAA,6BAUiBG,IAVjB,EAUuB;AAErB,aAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,YAAK,CAACN,iBAAiB,CAACO,gBAAlB,CAAmCH,IAAI,CAACH,IAAxC,CAAN,EAAsD;AACrD,iBAAOK,MAAM,CAAC,mBAAD,CAAb;AACA;;AAED,YAAIE,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACCD,QAAAA,MAAM,CAACE,MAAP,GAAgB,UAASC,CAAT,EAAY;AAE3B,cAAIC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASD,MAAtB;AAAA,cAA8BE,IAA9B;;AAEA,cAAKV,IAAI,CAACH,IAAL,KAAc,kBAAnB,EAAwC;AAEvC,mBAAOI,OAAO,CAACO,MAAD,CAAd;AAEA,WAJD,MAIO;AAEN,gBAAIG,KAAK,GAAGhB,IAAI,CAACiB,IAAL,CAAUJ,MAAV,EAAkB;AAACX,cAAAA,IAAI,EAAE;AAAP,aAAlB,CAAZ;AAEA,gBAAIgB,SAAS,GAAGF,KAAK,CAACG,UAAN,CAAiB,CAAjB,KAAuBH,KAAK,CAACI,QAAN,CAAeC,MAAf,CAAsB,CAAtB,EAAyBC,IAAhE;AAEA,gBAAIC,WAAW,GAAGvB,IAAI,CAACwB,KAAL,CAAWC,aAAX,CAAyBT,KAAK,CAACK,MAAN,CAAaH,SAAb,CAAzB,CAAlB;AACA,mBAAOZ,OAAO,CAACiB,WAAD,CAAd;AACA;AACD,SAjBD;;AAmBAd,QAAAA,MAAM,CAACiB,OAAP,GAAiB,UAASd,CAAT,EAAY;AAC5BH,UAAAA,MAAM,CAACkB,KAAP;AACA,iBAAOpB,MAAM,CAAC,oBAAD,CAAb;AACA,SAHD;;AAIDE,QAAAA,MAAM,CAACmB,kBAAP,CAA0BvB,IAA1B;AACA,OA9BM,CAAP;AA+BA;AA3CF;AAAA;AAAA,uCA6C2BwB,aA7C3B,EA6C0C;AACxC;AACA,UAAIC,SAAS,GAAG,EAAhB;AAAA,UAAoBC,OAAO,GAAG,EAA9B;;AAEA,WAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,aAAa,CAACI,MAAnC,EAA2CD,CAAC,EAA5C,EAAiD;AAEhD,YAAIE,IAAI,GAAGL,aAAa,CAACG,CAAD,CAAxB;AACAF,QAAAA,SAAS,CAACK,IAAV,CAAeD,IAAI,CAAC,SAAD,CAAnB;AAEA,YAAKA,IAAI,CAAC,QAAD,CAAT,EAAsBH,OAAO,CAACI,IAAR,CAAaD,IAAI,CAAC,QAAD,CAAjB;AACtB;;AACD,UAAKH,OAAO,CAACE,MAAR,GAAiB,CAAtB,EAA0B,OAAO,SAAQ3B,OAAR,CAAgB;AAACwB,QAAAA,SAAS,EAATA,SAAD;AAAYC,QAAAA,OAAO,EAAPA;AAAZ,OAAhB,CAAP;AAE1B,aAAO,SAAQzB,OAAR,CAAgB;AAACwB,QAAAA,SAAS,EAATA;AAAD,OAAhB,CAAP;AACA;AA3DF;;AAAA;AAAA","sourcesContent":["import XLSX from 'xlsx';\n\n\nexport class SpreadsheetHelper {\n\tstatic validateFileType(type) {\n\t\tlet types = [\n\t\t\t\"application/vnd.oasis.opendocument.spreadsheet\",\n\t\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\"application/json\"\n\t\t];\n\t\treturn types.includes(type);\n\t}\n\n\tstatic readFile(file) {\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif ( !SpreadsheetHelper.validateFileType(file.type) ) {\n\t\t\t\treturn reject(\"Invalid file type\");\n\t\t\t} \n\n\t\t\tlet reader = new FileReader();\n\t\t\t\treader.onload = function(e) {\n\n\t\t\t\t\tlet result = e.target.result, json;\n\n\t\t\t\t\tif ( file.type === \"application/json\" ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\n\t\t\t\t\t} else { \n\n\t\t\t\t\t\tlet sheet = XLSX.read(result, {type: \"binary\"});\n\n\t\t\t\t\t\tlet\tsheetName = sheet.SheetNames[0] || sheet.Workbook.Sheets[0].name;\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet\tsheetToJson = XLSX.utils.sheet_to_json(sheet.Sheets[sheetName]);\n\t\t\t\t\t\treturn resolve(sheetToJson);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treader.onerror = function(e) {\n\t\t\t\t\treader.abort()\n\t\t\t\t\treturn reject(\"Error reading file\");\n\t\t\t\t}\n\t\t\treader.readAsBinaryString(file);\n\t\t})\n\t}\n\n\tstatic readObjectProperty(arrayOfObject) {\n\t\t// columns -> [\"address\", ?\"amount\"]\n\t\tlet addresses = [], amounts = [];\n\n\t\tfor ( let i = 0; i < arrayOfObject.length; i++ ) {\n\t\t\t\n\t\t\tlet temp = arrayOfObject[i];\n\t\t\taddresses.push(temp[\"address\"]);\n\n\t\t\tif ( temp[\"amount\"] ) amounts.push(temp[\"amount\"]);\n\t\t}\n\t\tif ( amounts.length > 0 ) return Promise.resolve({addresses, amounts});\n\t\t\n\t\treturn Promise.resolve({addresses});\n\t}\n}"]},"metadata":{},"sourceType":"module"}