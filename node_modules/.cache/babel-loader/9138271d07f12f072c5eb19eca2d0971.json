{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nvar networkKey = {\n  \"1\": {\n    \"name\": \"Ethereum Main Network\",\n    \"colour\": \"success\"\n  },\n  \"2\": {\n    \"name\": \"Morden Test network\",\n    \"colour\": \"dark\"\n  },\n  \"3\": {\n    \"name\": \"Ropsten Test Network\",\n    \"colour\": \"danger\"\n  },\n  \"4\": {\n    \"name\": \"Rinkeby Test Network\",\n    \"colour\": \"warning\"\n  },\n  \"42\": {\n    \"name\": \"Kovan Test Network\",\n    \"colour\": \"link\"\n  },\n  \"5\": {\n    \"name\": \"Goerli Test Network\",\n    \"colour\": \"info\"\n  }\n};\nexport var Web3ConnectionHandler =\n/*#__PURE__*/\nfunction () {\n  function Web3ConnectionHandler() {\n    _classCallCheck(this, Web3ConnectionHandler);\n  }\n\n  _createClass(Web3ConnectionHandler, null, [{\n    key: \"checkBrowserCompatibility\",\n    value: function checkBrowserCompatibility() {\n      if (typeof window.ethereum !== 'undefined' || typeof window.web3 !== 'undefined') {\n        return window['ethereum'] || window.web3.currentProvider;\n      }\n    }\n  }, {\n    key: \"enableWeb3Browser\",\n    value: function () {\n      var _enableWeb3Browser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var provider, browserProperties, request;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\n                if (!provider) {\n                  _context.next = 16;\n                  break;\n                }\n\n                browserProperties = {};\n                _context.prev = 3;\n                _context.next = 6;\n                return provider.enable();\n\n              case 6:\n                request = _context.sent;\n                browserProperties.selectedAddress = request[0];\n                browserProperties.networkVersion = provider.networkVersion;\n                return _context.abrupt(\"return\", browserProperties);\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(_JSON$stringify(_context.t0));\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 12]]);\n      }));\n\n      function enableWeb3Browser() {\n        return _enableWeb3Browser.apply(this, arguments);\n      }\n\n      return enableWeb3Browser;\n    }()\n  }, {\n    key: \"instantiateWeb3Browser\",\n    value: function instantiateWeb3Browser() {\n      var provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\n      if (provider) {\n        var web3 = new Web3(provider);\n        return web3;\n      }\n    }\n  }, {\n    key: \"connectedNetwork\",\n    value: function connectedNetwork() {\n      return networkKey[Web3ConnectionHandler.checkBrowserCompatibility().networkVersion];\n    }\n  }]);\n\n  return Web3ConnectionHandler;\n}();","map":{"version":3,"sources":["/home/abdulhakeem/Express/exsender/components/web3-connect.js"],"names":["networkKey","Web3ConnectionHandler","window","ethereum","web3","currentProvider","provider","checkBrowserCompatibility","browserProperties","enable","request","selectedAddress","networkVersion","console","log","Web3"],"mappings":";;;;;AAAA,IAAIA,UAAU,GAAG;AACf,OAAK;AAAC,YAAQ,uBAAT;AAAkC,cAAU;AAA5C,GADU;AAEf,OAAK;AAAC,YAAQ,qBAAT;AAAgC,cAAU;AAA1C,GAFU;AAGf,OAAK;AAAC,YAAQ,sBAAT;AAAiC,cAAU;AAA3C,GAHU;AAIf,OAAK;AAAC,YAAQ,sBAAT;AAAiC,cAAU;AAA3C,GAJU;AAKf,QAAM;AAAC,YAAQ,oBAAT;AAA+B,cAAU;AAAzC,GALS;AAMf,OAAK;AAAC,YAAQ,qBAAT;AAAgC,cAAU;AAA1C;AANU,CAAjB;AASA,WAAaC,qBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,gDAEoC;AAClC,UAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA3B,IAA2C,OAAOD,MAAM,CAACE,IAAd,KAAuB,WAAtE,EAAoF;AACnF,eAAOF,MAAM,CAAC,UAAD,CAAN,IAAsBA,MAAM,CAACE,IAAP,CAAYC,eAAzC;AACA;AACD;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASMC,gBAAAA,QATN,GASiBL,qBAAqB,CAACM,yBAAtB,EATjB;;AAAA,qBAUMD,QAVN;AAAA;AAAA;AAAA;;AAYOE,gBAAAA,iBAZP,GAY2B,EAZ3B;AAAA;AAAA;AAAA,uBAewBF,QAAQ,CAACG,MAAT,EAfxB;;AAAA;AAeQC,gBAAAA,OAfR;AAgBIF,gBAAAA,iBAAiB,CAACG,eAAlB,GAAoCD,OAAO,CAAC,CAAD,CAA3C;AACAF,gBAAAA,iBAAiB,CAACI,cAAlB,GAAmCN,QAAQ,CAACM,cAA5C;AAjBJ,iDAkBWJ,iBAlBX;;AAAA;AAAA;AAAA;AAqBIK,gBAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AArBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6CA4BiC;AAC/B,UAAIR,QAAQ,GAAGL,qBAAqB,CAACM,yBAAtB,EAAf;;AACA,UAAID,QAAJ,EAAc;AACb,YAAIF,IAAI,GAAG,IAAIW,IAAJ,CAAST,QAAT,CAAX;AACA,eAAOF,IAAP;AACA;AACD;AAlCF;AAAA;AAAA,uCAmC2B;AACzB,aAAOJ,UAAU,CAACC,qBAAqB,CAACM,yBAAtB,GAAkDK,cAAnD,CAAjB;AACA;AArCF;;AAAA;AAAA","sourcesContent":["let networkKey = {\n\t\t\"1\": {\"name\": \"Ethereum Main Network\", \"colour\": \"success\"}, \n\t\t\"2\": {\"name\": \"Morden Test network\", \"colour\": \"dark\"}, \n\t\t\"3\": {\"name\": \"Ropsten Test Network\", \"colour\": \"danger\"},\n\t\t\"4\": {\"name\": \"Rinkeby Test Network\", \"colour\": \"warning\"}, \n\t\t\"42\": {\"name\": \"Kovan Test Network\", \"colour\": \"link\"},\n\t\t\"5\": {\"name\": \"Goerli Test Network\", \"colour\": \"info\"}\n\t}\n\nexport class Web3ConnectionHandler {\n\n\tstatic checkBrowserCompatibility() {\n\t\tif (typeof window.ethereum !== 'undefined' || (typeof window.web3 !== 'undefined')) {\n\t\t\treturn window['ethereum'] || window.web3.currentProvider;\n\t\t}\n\t}\n\n\tstatic async enableWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\t\n\t\t\tlet browserProperties = {};\n\t\t\t\n\t\t\ttry{\n\t\t\t\tlet request = await provider.enable();\n\t\t\t\tbrowserProperties.selectedAddress = request[0];\n\t\t\t\tbrowserProperties.networkVersion = provider.networkVersion;\n\t\t\t\treturn browserProperties;\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(JSON.stringify(err));\n\t\t\t\tthrow (err);\n\t\t\t\t// return null;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic instantiateWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\tlet web3 = new Web3(provider);\n\t\t\treturn web3;\n\t\t} \n\t}\n\tstatic connectedNetwork() {\n\t\treturn networkKey[Web3ConnectionHandler.checkBrowserCompatibility().networkVersion];\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}