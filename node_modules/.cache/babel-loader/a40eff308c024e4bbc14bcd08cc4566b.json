{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport standardAbi from \"../abi/distributor.json\";\nvar xplAddress = \"0x2d213012e19f1433cb394ae6faba1c6a71ad1690\";\nvar networkKey = {\n  \"1\": {\n    \"name\": \"Ethereum Main Network\",\n    \"colour\": \"success\"\n  },\n  \"2\": {\n    \"name\": \"Morden Test network\",\n    \"colour\": \"dark\"\n  },\n  \"3\": {\n    \"name\": \"Ropsten Test Network\",\n    \"colour\": \"danger\"\n  },\n  \"4\": {\n    \"name\": \"Rinkeby Test Network\",\n    \"colour\": \"warning\"\n  },\n  \"42\": {\n    \"name\": \"Kovan Test Network\",\n    \"colour\": \"link\"\n  },\n  \"5\": {\n    \"name\": \"Goerli Test Network\",\n    \"colour\": \"info\"\n  },\n  \"loading\": {\n    \"name\": \"Unknown Network\",\n    \"colour\": \"black\"\n  }\n};\nexport var Web3ConnectionHandler =\n/*#__PURE__*/\nfunction () {\n  function Web3ConnectionHandler() {\n    _classCallCheck(this, Web3ConnectionHandler);\n  }\n\n  _createClass(Web3ConnectionHandler, null, [{\n    key: \"checkBrowserCompatibility\",\n    value: function checkBrowserCompatibility() {\n      if (typeof window.ethereum !== 'undefined' || typeof window.web3 !== 'undefined') {\n        return window['ethereum'] || window.web3.currentProvider;\n      }\n    }\n  }, {\n    key: \"enableWeb3Browser\",\n    value: function () {\n      var _enableWeb3Browser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var provider, browserProperties, request;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\n                if (!provider) {\n                  _context.next = 16;\n                  break;\n                }\n\n                browserProperties = {};\n                _context.prev = 3;\n                _context.next = 6;\n                return provider.enable();\n\n              case 6:\n                request = _context.sent;\n                browserProperties.selectedAddress = request[0];\n                browserProperties.networkVersion = provider.networkVersion;\n                return _context.abrupt(\"return\", browserProperties);\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(_JSON$stringify(_context.t0));\n                throw _context.t0;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 12]]);\n      }));\n\n      function enableWeb3Browser() {\n        return _enableWeb3Browser.apply(this, arguments);\n      }\n\n      return enableWeb3Browser;\n    }()\n  }, {\n    key: \"instantiateWeb3Browser\",\n    value: function instantiateWeb3Browser() {\n      var provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\n      if (provider) {\n        var _web = new Web3(provider);\n\n        return _web;\n      }\n    }\n  }, {\n    key: \"connectedNetwork\",\n    value: function connectedNetwork() {\n      return networkKey[Web3ConnectionHandler.checkBrowserCompatibility().networkVersion];\n    }\n  }, {\n    key: \"getContractProp\",\n    value: function getContractProp(contractAddress, method) {\n      for (var _len = arguments.length, methodParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        methodParams[_key - 2] = arguments[_key];\n      }\n\n      var web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n      var contract = web3.eth.contract(standardAbi).at(contractAddress);\n      return new _Promise(function (resolve, reject) {\n        contract[method].apply(contract, methodParams.concat([function (err, result) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        }]));\n      });\n    }\n  }, {\n    key: \"approveSpender\",\n    value: function approveSpender(contractAddress, amount) {\n      var spender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : xplAddress;\n      var web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n      var contract = web3.eth.contract(standardAbi).at(contractAddress);\n      return new _Promise(function (resolve, reject) {\n        contract[\"approve\"].sendTransaction(spender, amount, function (err, txHash) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(txHash);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"distributeToken\",\n    value: function distributeToken(method, addresses, amount) {\n      var contractAddress = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : xplAddress;\n      var web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n      var contract = web3.eth.contract(standardAbi).at(contractAddress);\n      return new _Promise(function (resolve, reject) {\n        contract[method].sendTransaction(addresses, amount, function (err, txHash) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(txHash);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"delay\",\n    value: function delay() {\n      var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5000;\n      return new _Promise(function (resolve) {\n        return setTimeout(resolve, ms);\n      });\n    }\n  }, {\n    key: \"getMinedTransactionReceipt\",\n    value: function getMinedTransactionReceipt(txHash) {\n      var web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n      return new _Promise(function (resolve, reject) {\n        web3.eth.getTransactionReceipt(txHash, function (err, receipt) {\n          if (receipt) {\n            resolve(receipt);\n          } else if (err == null) {\n            Web3ConnectionHandler.delay().then(function () {\n              Web3ConnectionHandler.getMinedTransactionReceipt(txHash);\n            });\n          } else {\n            reject();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"validateAddress\",\n    value: function validateAddress(address) {\n      if (typeof address == \"string\") {\n        return web3.isAddress(address);\n      } else if (address instanceof Array && address.length > 0) {\n        return !address.some(function (addr) {\n          return !web3.isAddress(addr);\n        });\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return Web3ConnectionHandler;\n}();","map":{"version":3,"sources":["/home/abdulhakeem/Express/exsender/utils/web3-connect.js"],"names":["standardAbi","xplAddress","networkKey","Web3ConnectionHandler","window","ethereum","web3","currentProvider","provider","checkBrowserCompatibility","browserProperties","enable","request","selectedAddress","networkVersion","console","log","Web3","contractAddress","method","methodParams","instantiateWeb3Browser","contract","eth","at","resolve","reject","err","result","amount","spender","sendTransaction","txHash","addresses","ms","setTimeout","getTransactionReceipt","receipt","delay","then","getMinedTransactionReceipt","address","isAddress","Array","length","some","addr"],"mappings":"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","sourcesContent":["import standardAbi from \"../abi/distributor.json\";\nlet xplAddress = \"0x2d213012e19f1433cb394ae6faba1c6a71ad1690\";\nlet networkKey = {\n\t\t\"1\": {\"name\": \"Ethereum Main Network\", \"colour\": \"success\"}, \n\t\t\"2\": {\"name\": \"Morden Test network\", \"colour\": \"dark\"}, \n\t\t\"3\": {\"name\": \"Ropsten Test Network\", \"colour\": \"danger\"},\n\t\t\"4\": {\"name\": \"Rinkeby Test Network\", \"colour\": \"warning\"}, \n\t\t\"42\": {\"name\": \"Kovan Test Network\", \"colour\": \"link\"},\n\t\t\"5\": {\"name\": \"Goerli Test Network\", \"colour\": \"info\"},\n\t\t\"loading\": {\"name\": \"Unknown Network\", \"colour\": \"black\"},\n\t}\n\nexport class Web3ConnectionHandler {\n\n\tstatic checkBrowserCompatibility() {\n\t\tif (typeof window.ethereum !== 'undefined' || (typeof window.web3 !== 'undefined')) {\n\t\t\treturn window['ethereum'] || window.web3.currentProvider;\n\t\t}\n\t}\n\n\tstatic async enableWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\t\n\t\t\tlet browserProperties = {};\n\t\t\t\n\t\t\ttry{\n\t\t\t\tlet request = await provider.enable();\n\t\t\t\tbrowserProperties.selectedAddress = request[0];\n\t\t\t\tbrowserProperties.networkVersion = provider.networkVersion;\n\t\t\t\treturn browserProperties;\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(JSON.stringify(err));\n\t\t\t\tthrow (err);\n\t\t\t\t// return null;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic instantiateWeb3Browser() {\n\t\tlet provider = Web3ConnectionHandler.checkBrowserCompatibility();\n\t\tif (provider) {\n\t\t\tlet web3 = new Web3(provider);\n\t\t\treturn web3;\n\t\t} \n\t}\n\tstatic connectedNetwork() {\n\t\treturn networkKey[Web3ConnectionHandler.checkBrowserCompatibility().networkVersion];\n\t}\n\n\tstatic getContractProp(contractAddress, method, ...methodParams) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[method](...methodParams, function(err, result){\n\t\t\t\tif(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tstatic approveSpender(contractAddress, amount, spender = xplAddress) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\t\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[\"approve\"].sendTransaction(spender, amount, function(err, txHash) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(txHash);\n\t\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tstatic distributeToken(method, addresses, amount, contractAddress = xplAddress) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\tlet contract = web3.eth.contract(standardAbi).at(contractAddress);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tcontract[method].sendTransaction(addresses, amount, function(err, txHash) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(txHash);\n\t\t\t\t\t}\n\t\t\t})\n\t\t})\t\n\t}\n\tstatic delay(ms = 5000) {\n\t\treturn new Promise( resolve => setTimeout(resolve, ms));\n\t}\n\tstatic getMinedTransactionReceipt(txHash) {\n\t\tlet web3 = Web3ConnectionHandler.instantiateWeb3Browser();\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tweb3.eth.getTransactionReceipt(txHash, function(err, receipt) {\n\t\t\t\tif (receipt) {\n\t\t\t\t\tresolve(receipt);\t\t\t\t\t\n\t\t\t\t} else if (err == null) {\n\t\t\t\t\tWeb3ConnectionHandler.delay()\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tWeb3ConnectionHandler.getMinedTransactionReceipt(txHash);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\tstatic validateAddress(address) {\n\t\tif ( typeof address == \"string\" ) {\n\n\t\t\treturn web3.isAddress(address);\n\t\t\n\t\t} else if ( address instanceof Array && address.length > 0 ) {\n\t\t\t\n\t\t\treturn !address.some( (addr) => !web3.isAddress(addr) );\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\treturn false;\n\t\t\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}