{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport XLSX from 'xlsx';\nexport var SpreadsheetHelper =\n/*#__PURE__*/\nfunction () {\n  function SpreadsheetHelper() {\n    _classCallCheck(this, SpreadsheetHelper);\n  }\n\n  _createClass(SpreadsheetHelper, null, [{\n    key: \"validateFileType\",\n    value: function validateFileType(type) {\n      var types = [\"application/vnd.oasis.opendocument.spreadsheet\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", \"application/json\"];\n      console.log(type);\n      return types.includes(type);\n    }\n  }, {\n    key: \"readColums\",\n    value: function readColums(file) {\n      for (var _len = arguments.length, columns = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        columns[_key - 1] = arguments[_key];\n      }\n\n      function replacer(key, value) {\n        if (columns.indexOf(key.toLowerCase()) > -1) {\n          return value;\n        }\n      }\n\n      return new _Promise(function (resolve, reject) {\n        if (!SpreadsheetHelper.validateFileType(file.type)) {\n          return reject(\"Invalid file type\");\n        }\n\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var result = e.target.result,\n              json;\n\n          if (file.type === \"application/json\") {\n            return resolve(result);\n          } else {\n            var sheet = XLSX.read(result, {\n              type: \"binary\"\n            });\n            var sheetName = sheet.SheetNames[0] || sheet.Workbook.Sheets[0].name;\n            var sheetToJson = XLSX.utils.sheet_to_json(sheet.Sheets[sheetName]);\n            console.log(_JSON$stringify(sheetToJson, replacer));\n            return resolve(_JSON$stringify(sheetToJson, replacer));\n          }\n        };\n\n        reader.onerror = function (e) {\n          reader.abort();\n          return reject(\"Error reading file\");\n        };\n\n        reader.readAsBinaryString(file);\n      });\n    }\n  }]);\n\n  return SpreadsheetHelper;\n}();","map":{"version":3,"sources":["/home/abdulhakeem/Express/exsender/utils/fileHelpers.js"],"names":["XLSX","SpreadsheetHelper","type","types","console","log","includes","file","columns","replacer","key","value","indexOf","toLowerCase","resolve","reject","validateFileType","reader","FileReader","onload","e","result","target","json","sheet","read","sheetName","SheetNames","Workbook","Sheets","name","sheetToJson","utils","sheet_to_json","onerror","abort","readAsBinaryString"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAGA,WAAaC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qCACyBC,IADzB,EAC+B;AAC7B,UAAIC,KAAK,GAAG,CACX,gDADW,EAEX,mEAFW,EAGX,kBAHW,CAAZ;AAKAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,aAAOC,KAAK,CAACG,QAAN,CAAeJ,IAAf,CAAP;AACA;AATF;AAAA;AAAA,+BAWmBK,IAXnB,EAWqC;AAAA,wCAATC,OAAS;AAATA,QAAAA,OAAS;AAAA;;AAEnC,eAASC,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC7B,YAAIH,OAAO,CAACI,OAAR,CAAgBF,GAAG,CAACG,WAAJ,EAAhB,IAAqC,CAAC,CAA1C,EAA8C;AAC7C,iBAAOF,KAAP;AACA;AACD;;AAED,aAAO,aAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACvC,YAAI,CAACd,iBAAiB,CAACe,gBAAlB,CAAmCT,IAAI,CAACL,IAAxC,CAAL,EAAqD;AACpD,iBAAOa,MAAM,CAAC,mBAAD,CAAb;AACA;;AAED,YAAIE,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACCD,QAAAA,MAAM,CAACE,MAAP,GAAgB,UAASC,CAAT,EAAY;AAE3B,cAAIC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASD,MAAtB;AAAA,cAA8BE,IAA9B;;AAEA,cAAKhB,IAAI,CAACL,IAAL,KAAc,kBAAnB,EAAwC;AAEvC,mBAAOY,OAAO,CAACO,MAAD,CAAd;AAEA,WAJD,MAIO;AAEN,gBAAIG,KAAK,GAAGxB,IAAI,CAACyB,IAAL,CAAUJ,MAAV,EAAkB;AAACnB,cAAAA,IAAI,EAAE;AAAP,aAAlB,CAAZ;AAEA,gBAAIwB,SAAS,GAAGF,KAAK,CAACG,UAAN,CAAiB,CAAjB,KAAuBH,KAAK,CAACI,QAAN,CAAeC,MAAf,CAAsB,CAAtB,EAAyBC,IAAhE;AAEA,gBAAIC,WAAW,GAAG/B,IAAI,CAACgC,KAAL,CAAWC,aAAX,CAAyBT,KAAK,CAACK,MAAN,CAAaH,SAAb,CAAzB,CAAlB;AACAtB,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAe0B,WAAf,EAA4BtB,QAA5B,CAAZ;AACA,mBAAOK,OAAO,CAAC,gBAAeiB,WAAf,EAA4BtB,QAA5B,CAAD,CAAd;AACA;AACD,SAlBD;;AAoBAQ,QAAAA,MAAM,CAACiB,OAAP,GAAiB,UAASd,CAAT,EAAY;AAC5BH,UAAAA,MAAM,CAACkB,KAAP;AACA,iBAAOpB,MAAM,CAAC,oBAAD,CAAb;AACA,SAHD;;AAKDE,QAAAA,MAAM,CAACmB,kBAAP,CAA0B7B,IAA1B;AACA,OAhCM,CAAP;AAiCA;AApDF;;AAAA;AAAA","sourcesContent":["import XLSX from 'xlsx';\n\n\nexport class SpreadsheetHelper {\n\tstatic validateFileType(type) {\n\t\tlet types = [\n\t\t\t\"application/vnd.oasis.opendocument.spreadsheet\",\n\t\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n\t\t\t\"application/json\"\n\t\t];\n\t\tconsole.log(type);\n\t\treturn types.includes(type);\n\t}\n\n\tstatic readColums(file, ...columns) {\n\t\t\n\t\tfunction replacer(key, value) {\n\t\t\tif( columns.indexOf(key.toLowerCase()) > -1 ) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t} \n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif( !SpreadsheetHelper.validateFileType(file.type) ) {\n\t\t\t\treturn reject(\"Invalid file type\");\n\t\t\t} \n\n\t\t\tlet reader = new FileReader();\n\t\t\t\treader.onload = function(e) {\n\n\t\t\t\t\tlet result = e.target.result, json;\n\n\t\t\t\t\tif ( file.type === \"application/json\" ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\n\t\t\t\t\t} else { \n\n\t\t\t\t\t\tlet sheet = XLSX.read(result, {type: \"binary\"});\n\n\t\t\t\t\t\tlet\tsheetName = sheet.SheetNames[0] || sheet.Workbook.Sheets[0].name;\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet\tsheetToJson = XLSX.utils.sheet_to_json(sheet.Sheets[sheetName]);\n\t\t\t\t\t\tconsole.log(JSON.stringify(sheetToJson, replacer))\n\t\t\t\t\t\treturn resolve(JSON.stringify(sheetToJson, replacer));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treader.onerror = function(e) {\n\t\t\t\t\treader.abort()\n\t\t\t\t\treturn reject(\"Error reading file\");\n\t\t\t\t}\n\n\t\t\treader.readAsBinaryString(file);\n\t\t})\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}